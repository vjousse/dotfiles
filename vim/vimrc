" VIM Configuration - Vincent Jousse
" Some links : http://nvie.com/posts/how-i-boosted-my-vim/

set nocompatible                  " Must come first because it changes other options.


" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
"call pathogen#helptags()
"call pathogen#runtime_append_all_bundles()
"

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

Plugin 'derekwyatt/vim-scala'
Plugin 'mileszs/ack.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'hallison/vim-markdown'
Plugin 'tpope/vim-surround'
Plugin 'mikewest/vimroom'
Plugin 'LustyExplorer'
Plugin 'jwhitley/vim-matchit'
Plugin 'Align'
Plugin 'pangloss/vim-javascript'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'Shougo/neocomplete.vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ervandew/supertab'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
Plugin 'nvie/vim-flake8'
Plugin 'ElmCast/elm-vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'scrooloose/syntastic'
Plugin 'w0ng/vim-hybrid'

" All of your Plugins must be added before the following line
call vundle#end()            " required

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<C

"if has("termguicolors")
"    set termguicolors
"endif

"set t_ut=
set t_Co=256
"syntax enable
"colorscheme colorsbox-material
"colorscheme hybrid_material
"
"
set background=dark
colorscheme hybrid
"highlight Normal ctermbg=0

let g:neocomplete#enable_at_startup = 1
call neocomplete#util#set_default_dictionary(
  \ 'g:neocomplete#sources#omni#input_patterns',
  \ 'elm',
  \ '\.')

if (&background == 'light')
  let g:Powerline_colorscheme='solarizedLightLC'
else
  let g:Powerline_colorscheme='solarizedDarkLC'
endif

" Set title on X window
set title

set clipboard=unnamedplus         " Alias unnamed register to the + register, which is the X Window clipboard.

" Hide buffer instead of abandoning when unloading
set hidden ruler wmnu
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pyc,*.pyo,**/vendor/**/vendor/**,*/project/*,*/target/*,*.hi

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.
set noerrorbells         " don't beep

" Backspace behave as expected
set backspace=indent,eol,start

set backupdir=~/.vim/tmp/,~/.tmp,~/tmp,/var/tmp,/tmp   " Keep swap files in one location
set directory=~/.vim/tmp/,~/.tmp,~/tmp,/var/tmp,/tmp   " Keep swap files in one location

set laststatus=2                  " Show the status line all the time

set wildmode=list:longest         " Make command completion behave like a shell

" Fast write
nmap <Leader>w :w<CR>

" Make the view port scroll faster
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" Press i to enter insert mode, and ii to exit.
:inoremap éé <Esc>

" Remap the marker char
nnoremap ' `
nnoremap ` '

" Command and search pattern history
set history=1000
set undolevels=1000

" Tabs and indentation.
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis

" Tabs for ruby
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2

" Tabs for python
autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4

" Tabs for javascript
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

syntax enable                     " Turn on syntax highlighting.
filetype on
filetype plugin on
filetype indent on

"highlight whitespaces
"set list " not compatible with vimroom linebreak
set listchars=tab:>.,trail:.,extends:#,nbsp:.
autocmd filetype html,xml set listchars-=tab:>.

"Switch vim into paste mode : will prevent ugly auto indentation
set pastetoggle=<F2>

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Easy window navigation for bépo
map <C-c> <C-w>h
map <C-t> <C-w>j
map <C-s> <C-w>k
map <C-r> <C-w>l

" Close other windows
map <leader>wo :only<cr>

" Pressing ,/ will clear the search buffer
nmap <silent> ,/ :let @/=""<CR>

" Use w!! when you've forgotten to open your file as root
cmap w!! w !sudo tee % >/dev/null

" Allow extended digraphs
set encoding=utf-8

" Enable folding by indentation
" Use: zc, zo, zC, zO, zR, zM
" Ctrl-K .3 for ⋯
" set foldmethod=indent
highlight Folded ctermfg=red
highlight FoldColumn ctermfg=white
set fillchars=fold:⋯

" My information
iab xdate =strftime("%d/%m/%Y %H:%M:%S")
iab xname Vincent Jousse
iab xsigp Vincent Jousse
iab xsigw Vincent Jousse

" Remove trailing whitespaces and ^M chars
autocmd FileType c,cpp,java,php,js,css,html,xml,yml,vim,scala,haskell,py
    \ autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

" PHP
let php_htmlInStrings = 1 "Coloration des balises HTML

" Indent PHP templates as HTML files
nnoremap <leader>= :set ft=html<cr>mhgg=G'h:set ft=php<cr>
map <leader>= :set ft=html<cr>mhgg=G'h:set ft=php<cr>
" Indent whole PHP file
nnoremap <leader>i <Esc>mygg=G'y
map <leader>i <Esc>mygg=G'y

" Detect twig filetype
au BufNewFile,BufRead *.twig setf htmljinja

" phpdoc
inoremap <C-P> <ESC>:call PhpDocSingle()<CR>i
nnoremap <C-P> :call PhpDocSingle()<CR>
vnoremap <C-P> :call PhpDocRange()<CR>
let g:pdv_cfg_Author = "Vincent Jousse <vincent@jousse.org>"
let g:pdv_cfg_License = "LGPL 3.0 {@link http://www.opensource.org/licenses/lgpl-3.0.html}"

let mapleader = ","

" TagList
let Tlist_Show_One_File = 1
nnoremap <silent> <F7> :TlistToggle<CR>

" Nerd Tree
map <Leader>nf :NERDTree<Enter>
map <Leader>nr :NERDTree %:p:h<Enter>
let NERDTreeQuitOnOpen=1

" Snipmate
let g:snips_author = 'Vincent Jousse <vincent@jousse.org>'

" Encoding
set statusline+=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P


"jquery color
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

"Latex

let g:Tex_ViewRule_pdf = 'okular'
let g:Tex_MultipleCompileFormats = 'dvi,ps,pdf'
let g:Tex_DefaultTargetFormat = 'pdf'


"Spell
augroup filetypedetect
  au BufNewFile,BufRead *.tex setlocal spell spelllang=fr
augroup END

"toggle spell
function! ToggleSpell()
  if &spell
    set nospell
  else
    set spell spelllang=fr
  end
endfunction

noremap <F10> :call ToggleSpell()<cr>
inoremap <F10> <Esc>:call ToggleSpell()<cr>a
nmap <leader>ss  :call ToggleSpell()<cr>

" define surround mappings myself
" does not work well with bépo
let g:surround_no_mappings = 1

nmap ds <Plug>Dsurround
nmap fs <Plug>Csurround
nmap ys <Plug>Ysurround
nmap yS <Plug>YSurround
nmap yss <Plug>Yssurround
nmap ySs <Plug>YSsurround
nmap ySS <Plug>YSsurround

" Align
" Disable default mappings
let g:loaded_AlignMapsPlugin=1

" Use Scalariform to format scala files

au BufEnter *.scala setl formatprg=java\ -jar\ /home/vjousse/usr/lib/scalariform.jar\ +alignSingleLineCaseStatements\ +doubleIndentClassDeclaration\ --stdin\ --stdout

" Format with scalariform then save
nmap <leader>i mygggqG'y:w<cr>

"  Clean code function
function! CleanCode()
  %retab          " Replace tabs with spaces
  %s///eg     " Turn DOS returns ^M into real returns
  %s=  *$==e      " Delete end of line blanks
  echo "Cleaned up this mess."
endfunction
nmap <leader>tt :call CleanCode()<cr>

" Ack
let g:ackprg="ack -H --nocolor --nogroup --column"
" Set a mark then search with Ack
nmap <leader>j mA:Ack<space>
" Set a mark, then pull word under cursor into Ack for a global search
nmap <leader>ja mA:Ack "<C-r>=expand("<cword>")<cr>"
nmap <leader>jA mA:Ack "<C-r>=expand("<cWORD>")<cr>"

" Navigate in quickfix window
nmap <leader>t :<C-U>exe "cnext ".(v:count ? v:count : "")<cr>
nmap <leader>s :<C-U>exe "cprevious ".(v:count ? v:count : "")<cr>

nmap <leader>d :!tig<cr>

" CTAGS
" Rebuild tags
nmap <leader>ct :!ctags&<cr><cr>
" Jump to next tag match
nmap ]t :bd<cr>:tnext<cr>
" Jump to previous tag match
nmap [t :bd<cr>:tprevious<cr>
nmap <leader>ts <C-]>

source ~/.vim/vimrc.bepo

" LaTeX specific mappings
let g:Tex_ViewRule_pdf = 'evince'
let g:Tex_DefaultTargetFormat = 'pdf'
let b:atp_Viewer = "xpdf"

" CtrlP config
let g:ctrlp_map = '<leader>p'

" YouCompleteMe config
"let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
"let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
"let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
"let g:ycm_complete_in_comments = 1 " Completion in comments
"let g:ycm_complete_in_strings = 1 " Completion in string

"let g:ycm_semantic_triggers = {
"     \ 'elm' : ['.'],
"     \}

" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<c-l>"
let g:UltiSnipsJumpBackwardTrigger = "<c-j>"

highlight OverLength ctermbg=red ctermfg=white guibg=#592929

autocmd BufEnter,WinEnter *.py match OverLength /\%81v.\+/
let g:elm_format_autosave = 1


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

let g:elm_syntastic_show_warnings = 1
