" VIM Configuration - Vincent Jousse
" Some links : http://nvie.com/posts/how-i-boosted-my-vim/

set nocompatible                  " Must come first because it changes other options.


" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
"call pathogen#helptags()
"call pathogen#runtime_append_all_bundles()
"

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

Plugin 'hallison/vim-markdown'
Plugin 'LustyExplorer'
Plugin 'jwhitley/vim-matchit'
Plugin 'Align'
Plugin 'pangloss/vim-javascript'
Plugin 'nvie/vim-flake8'
Plugin 'ElmCast/elm-vim'
Plugin 'elixir-lang/vim-elixir'
" Plugin 'vim-syntastic/syntastic'
Plugin 'mhartington/oceanic-next'
Plugin 'slashmili/alchemist.vim'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'lepture/vim-jinja'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'arcticicestudio/nord-vim'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
Plugin 'w0rp/ale'
Plugin 'evidens/vim-twig'
Plugin 'dracula/vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"if has("termguicolors")
"    set termguicolors
"endif

"set t_ut=
"set t_Co=256
"syntax enable
"colorscheme colorsbox-material
"colorscheme hybrid_material
"
"
"set background=dark
"colorscheme hybrid
"highlight Normal ctermbg=0


 " Theme
syntax enable
" for vim 7
"set t_Co=16

" for vim 8
"if (has("termguicolors"))
" set termguicolors
"endif
"colorscheme hybrid_material
"colorscheme OceanicNext

"set t_Co=256   " This is may or may not needed.

"set background=dark
"colorscheme base16-material-dark

color dracula
if has("gui_running")
    colorscheme iawriter
    set guifont=Droid\ Sans\ Mono\ 13
    "set guifont=Cousine\ 13
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right scroll bar
    set guioptions-=L  "remove left scroll bar
"    let g:vimroom_guibackground="white"
    setlocal spell spelllang=fr
    autocmd VimEnter * Limelight
    autocmd VimEnter * Goyo
endif
"colorscheme nord

"highlight LineNr ctermfg=grey ctermbg=white


"
"highlight Normal ctermbg=NONE
"highlight NonText ctermbg=NONE
"
"

" Set title on X window
set title

set clipboard=unnamedplus         " Alias unnamed register to the + register, which is the X Window clipboard.

" Hide buffer instead of abandoning when unloading
set hidden ruler wmnu
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pyc,*.pyo,**/vendor/**/vendor/**,*/project/*,*/target/*,*.hi

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.
set noerrorbells         " don't beep

" Backspace behave as expected
set backspace=indent,eol,start

set backupdir=~/.vim/tmp/,~/.tmp,~/tmp,/var/tmp,/tmp   " Keep swap files in one location
set directory=~/.vim/tmp/,~/.tmp,~/tmp,/var/tmp,/tmp   " Keep swap files in one location

set laststatus=2                  " Show the status line all the time

set wildmode=list:longest         " Make command completion behave like a shell

" Fast write
nmap <leader>w :w<CR>

" Make the view port scroll faster
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" Press i to enter insert mode, and ii to exit.
:inoremap éé <Esc>

" Remap the marker char
nnoremap ' `
nnoremap ` '

" Command and search pattern history
set history=1000
set undolevels=1000

" Tabs and indentation.
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis

" Tabs for ruby
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2

" Tabs for python
autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4

" Tabs for javascript
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

syntax enable                     " Turn on syntax highlighting.
filetype on
filetype plugin on
filetype indent on

"highlight whitespaces
"set list " not compatible with vimroom linebreak
set listchars=tab:>.,trail:.,extends:#,nbsp:.
autocmd filetype html,xml set listchars-=tab:>.

"Switch vim into paste mode : will prevent ugly auto indentation
set pastetoggle=<F2>

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Easy window navigation for bépo
map <C-c> <C-w>h
map <C-t> <C-w>j
map <C-s> <C-w>k
map <C-r> <C-w>l

" Close other windows
map <leader>wo :only<cr>

" Pressing ,/ will clear the search buffer
nmap <silent> ,/ :let @/=""<CR>

" Use w!! when you've forgotten to open your file as root
cmap w!! w !sudo tee % >/dev/null

" Allow extended digraphs
set encoding=utf-8

" Enable folding by indentation
" Use: zc, zo, zC, zO, zR, zM
" Ctrl-K .3 for ⋯
" set foldmethod=indent
highlight Folded ctermfg=red
highlight FoldColumn ctermfg=white
set fillchars=fold:⋯

" Remove trailing whitespaces and ^M chars
autocmd FileType c,cpp,java,php,js,css,html,xml,yml,vim,scala,haskell,py
    \ autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

" PHP
let php_htmlInStrings = 1 "Coloration des balises HTML

" Indent PHP templates as HTML files
nnoremap <leader>= :set ft=html<cr>mhgg=G'h:set ft=php<cr>
map <leader>= :set ft=html<cr>mhgg=G'h:set ft=php<cr>
" Indent whole PHP file
nnoremap <leader>i <Esc>mygg=G'y
map <leader>i <Esc>mygg=G'y

" Detect twig filetype
au BufNewFile,BufRead *.twig setf htmljinja

let mapleader = ","

" TagList
let Tlist_Show_One_File = 1
nnoremap <silent> <F7> :TlistToggle<CR>

" Snipmate
let g:snips_author = 'Vincent Jousse <vincent@jousse.org>'

" Encoding
set statusline+=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P


"Spell
augroup filetypedetect
  au BufNewFile,BufRead *.tex setlocal spell spelllang=fr
augroup END

"toggle spell
function! ToggleSpell()
  if &spell
    set nospell
  else
    set spell spelllang=fr
  end
endfunction

noremap <F10> :call ToggleSpell()<cr>
inoremap <F10> <Esc>:call ToggleSpell()<cr>a
nmap <leader>ss  :call ToggleSpell()<cr>

" define surround mappings myself
" does not work well with bépo
let g:surround_no_mappings = 1

nmap ds <Plug>Dsurround
nmap fs <Plug>Csurround
nmap ys <Plug>Ysurround
nmap yS <Plug>YSurround
nmap yss <Plug>Yssurround
nmap ySs <Plug>YSsurround
nmap ySS <Plug>YSsurround

" Align
" Disable default mappings
let g:loaded_AlignMapsPlugin=1

"  Clean code function
function! CleanCode()
  %retab          " Replace tabs with spaces
  %s///eg     " Turn DOS returns ^M into real returns
  %s=  *$==e      " Delete end of line blanks
  echo "Cleaned up this mess."
endfunction
nmap <leader>tt :call CleanCode()<cr>

" Ack
let g:ackprg="ack -H --nocolor --nogroup --column"
" Set a mark then search with Ack
nmap <leader>j mA:Ack<space>
" Set a mark, then pull word under cursor into Ack for a global search
nmap <leader>ja mA:Ack "<C-r>=expand("<cword>")<cr>"
nmap <leader>jA mA:Ack "<C-r>=expand("<cWORD>")<cr>"

" Navigate in quickfix window
nmap <leader>t :<C-U>exe "cnext ".(v:count ? v:count : "")<cr>
nmap <leader>s :<C-U>exe "cprevious ".(v:count ? v:count : "")<cr>

nmap <leader>d :!tig<cr>

nnoremap <silent> <Leader>rg :Rg <C-R><C-W><CR>

source ~/.vim/vimrc.bepo

let g:elm_format_autosave = 1


" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1

" let g:elm_syntastic_show_warnings = 1


let g:alchemist_tag_map = '<leader>ll'
let g:alchemist_tag_stack_map = '<leader>rr'
let g:alchemist#elixir_erlang_src = "/usr/local/share/src"

" let g:syntastic_enable_elixir_checker=1

nmap <silent> <C-h> <Plug>(ale_previous_wrap)
nmap <silent> <C-g> <Plug>(ale_next_wrap)

let g:ale_linters = {
\   'haskell': [],
\}
